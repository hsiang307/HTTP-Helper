include "global.tbh"
dim wln_dhcp_fail_ctr as byte 
dim dns_socket, request_socket, upgrade_socket as byte
dim request_ip as string
'====================================================================

'Initializes sockets for DNS requests.

sub dns_init_sockets()
	
	dns_socket=sock_get("DNS")
	dns_start(dns_socket)
	
		
end sub

sub callback_dns_answer_acquired(return_type as en_dns_return_type, byref return_string as string)
	
	if(return_type=EN_DNS_RET_IP) then
		request_ip = ddstr(return_string)
		current_http_state.state=DNS_ACQUIRED
	end if
	
end sub

'DNS finds IP address for specified domain name. Assigns this IP as the target IP for the Request socket.

sub dns_init(domainname as string)
	
	current_http_state.state=DNS_NOT_ACQUIRED
'	header_state=RESPONSE
	sock.num=dns_socket
	dns_query(domainname)	
	
end sub


sub on_sys_timer()

	wln_proc_timer()
	dhcp_proc_timer()
	dns_proc_timer()
	
end sub

sub on_wln_task_complete(completed_task as pl_wln_tasks)

	wln_proc_task_complete(completed_task)
	
end sub

sub on_wln_event(wln_event as pl_wln_events)

	wln_proc_event(wln_event)
	
end sub

sub callback_wln_ok()

	dhcp_start(PL_SOCK_INTERFACE_WLN,"","")
		
end sub

sub callback_dhcp_ok(renew as no_yes, interface as pl_sock_interfaces, byref ip as string, byref gateway_ip as string, byref netmask as string, lease_time as dword)
	
	if interface=PL_SOCK_INTERFACE_NET then
		if renew=YES and net.ip<>ip then
			sys.reboot
		end if
		if net.ip<>ip then
			net.ip=ip
			net.gatewayip=gateway_ip
			net.netmask=netmask
		end if
		dns_connect(PL_SOCK_INTERFACE_NET, "8.8.4.4", 0)
	end if
	
	if interface=PL_SOCK_INTERFACE_WLN then
		if renew=YES and wln.ip<>ip then
			sys.reboot
		end if
		if wln.ip<>ip then
			wln.ip=ip
			wln.gatewayip=gateway_ip
			wln.netmask=netmask
		end if
		dns_connect(PL_SOCK_INTERFACE_WLN, "8.8.4.4", 0)
	end if
				
end sub

sub callback_dhcp_failure(interface as pl_sock_interfaces,failure_code as en_dhcp_status_codes)

	if interface=PL_SOCK_INTERFACE_WLN then
		if wln_dhcp_fail_ctr>=DHCP_FAIL_LIMIT then
			wln.ip=ALT_WLN_IP
			wln.gatewayip=ALT_WLN_GATEWAY_IP
			wln.netmask=ALT_WLN_NETMASK
			dhcp_stop(PL_SOCK_INTERFACE_WLN)
		else
			wln_dhcp_fail_ctr=wln_dhcp_fail_ctr+1
		end if
	end if
	
end sub

sub callback_wln_failure(wln_state as en_wln_status_codes)
end sub

sub callback_dns_failure(status as en_dns_status_codes)
end sub

sub callback_dns_pre_buffrq(num_of_pages_required as byte)
end sub

sub callback_dns_buff_released()
end sub

sub callback_wln_starting_association()
end sub

sub callback_wln_pre_buffrq(required_buff_pages as byte)
end sub

sub callback_wln_rescan_result(current_rssi as byte, scan_rssi as byte, different_ap as no_yes)
end sub

sub callback_wln_rescan_for_better_ap()
end sub

sub callback_dhcp_pre_clear_ip(interface as pl_sock_interfaces)
end sub

sub callback_dhcp_pre_buffrq(required_buff_pages as byte)
end sub

sub callback_dhcp_buff_released()
end sub