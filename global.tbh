'DEFINES-------------------------------------------------------------

#define HTTP_DEBUG_PRINT 1
#define DHCP_DEBUG_PRINT 1

#define WLN_CLK PL_IO_NUM_53
#define WLN_CS PL_IO_NUM_49
#define WLN_DI PL_IO_NUM_52
#define WLN_DO PL_IO_NUM_50
#define WLN_RST PL_IO_NUM_51

#define HTTP_DNS_URLS "http://192.168.1.170:80,http://www.wikipedia.org:80,http://httpbin.org/get,http://httpbin.org:8080/get,http://httpbin.org:443/get,http://httpbin.org:80/get,http://www.facebook.com,http://www.yahoo.com,http://www.twitter.com,http://www.instagram.com,http://www.ebay.com"
#define HTTP_NUM_OF_URLS 10
#define HTTP_MAX_URL_LEN 255

'INCLUDES------------------------------------------------------------

include "sock\trunk\sock.tbh"
include "dhcp\trunk\dhcp.tbh"
include "dns\trunk\dns.tbh"
include "wln\trunk\wln.tbh"
include "http_helper.tbh" 

'DECLARATIONS--------------------------------------------------------

const DHCP_FAIL_LIMIT=1 'max number of DHCP retry "batches"
const ALT_NET_IP="192.168.1.40"
const ALT_NET_GATEWAY_IP="192.168.1.1"
const ALT_NET_NETMASK="255.255.255.0"
const ALT_WLN_IP="192.168.1.41"
const ALT_WLN_GATEWAY_IP="192.168.1.1"
const ALT_WLN_NETMASK="255.255.255.0"

'declare request_socket as byte
CONST PL_TLS_EST = &h82
'--------------------------------------------------------------------
enum pl_tls_state
'<b>ENUM. </b><br><br> Contains a list of constants related to possible TLS errors.
    PL_TLS_SUCCESS,   
    PL_TLS_ERROR_RND,   '<b>PLATFORM CONSTANT. </b><br><br> Unable to make random seed.  
    PL_TLS_ERROR_CFG,   '<b>PLATFORM CONSTANT. </b><br><br> Unable to upgrade socket to ssl.      
    PL_TLS_ERROR_CTX,   '<b>PLATFORM CONSTANT. </b><br><br> Unable to upgrade socket to ssl.      
    PL_TLS_ERROR_SOCKNUM,   '<b>PLATFORM CONSTANT. </b><br><br> Unable to upgrade socket to ssl.  
    PL_TLS_ERROR_NOBUFF 	
end enum

syscall(834) sock.tlsinit() as pl_tls_state

syscall(835) sock.tlshandshake()

syscall(836) sock.tlsdeinit()

'--------------------------------------------------------------------
syscall(837) sock.tlssetdata(byref txdata as string) as word
'<b>METHOD. </b><br><br>
'For the selected socket (selection is made through <font color="maroon"><b>sock.num</b></font>) adds the data passed in the txdata argument to
'the contents of the TX buffer. If the buffer doesn't have enough space to accommodate the data being added then this data will be truncated. 
'Newly saved data is not sent out immediately. This only happens after the data has been encrypted. 
'Returns the number of bytes sent. 


'--------------------------------------------------------------------
syscall(838) sock.tlsgetdata(maxinplen as word) as string
'<b>METHOD. </b><br><br>
'For the selected socket (selection is made through <font color="maroon"><b>sock.num</b></font>) returns the string that contains the unencrypted data
'extracted from the RX buffer. Extracted data is permanently deleted from the buffer. <br><br>
'Length of extracted data is limited by one of the three factors (whichever is smaller): amount of data in the RX buffer itself, capacity of 
'the "receiving" string variable, and the limit set by the maxinplen argument.<br><br>


'--------------------------------------------------------------------
syscall(840) sock.tlspeekdata(maxinplen as word) as string
'<b>METHOD. </b><br><br>
'For the selected socket (selection is made through <font color="maroon"><b>sock.num</b></font>) returns the string that contains the unencrypted data
'extracted from the RX buffer. Extracted data is permanently deleted from the buffer. <br><br>
'Length of extracted data is limited by one of the three factors (whichever is smaller): amount of data in the RX buffer itself, capacity of 
'the "receiving" string variable, and the limit set by the maxinplen argument.<br><br>

#define BUFF_PAGE_TYPE word

'--------------------------------------------------------------------
syscall(839,"35.TDL") sock.tlsbuffrq(numpages as BUFF_PAGE_TYPE) as BUFF_PAGE_TYPE
