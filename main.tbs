include "global.tbh"
dim test_no as byte = 0

type http_test
	method as HTTP_REQUEST_METHODS
	url as string
	data as string
	content_type as string
	cert as string
end type

dim tests as http_test(10) = {
	{HTTP_GET, "https://www.google.com/", "sensor_data", "text/plain", "google.cer"},
	{HTTP_GET, "http://192.168.1.110:3000", "sensor_data", "text/plain", ""},
	{HTTP_GET, "https://httpbin.org/post", "sensor_data", "text/plain", "httpbin.cer"},
	{HTTP_GET, "https://104.40.239.93/lorem_ipsum.html", "sensor_data", "text/plain", "sample.cer"},
	{HTTP_GET, "https://www.amazon.com/", "sensor_data", "text/plain", "amazon.cer"}
}

sub on_sys_init()
	dhcp_start(HTTP_REQUEST_INTERFACE,"","")
	dns_start(sock_get("DNS"))
	
	
end sub

sub on_button_pressed()



'	
'	http_request(HTTP_GET, "https://drive.google.com/file/d/1Cb3SP3_Ujr4fU1_NzcS8cc4CIpLwf4db/view", HTTP_REQUEST_INTERFACE,"","")
'	http_request_long(HTTP_POST, "http://httpbin.org/post", HTTP_REQUEST_INTERFACE,"data="+http_encode_url("sample 1"),"application/x-www-form-urlencoded")
'	http_request(HTTP_GET, "https://www.microsoft.com/", HTTP_REQUEST_INTERFACE,"", "text/plain") 'REDIRECTS! ZH-TW DOESN'T WORK!
'	http_request(HTTP_GET, "https://www.google.com/", HTTP_REQUEST_INTERFACE,"", "text/plain")
'	http_request(HTTP_GET, "https://www.facebook.com/unsupportedbrowser", HTTP_REQUEST_INTERFACE,"", "text/plain")
'	http_request_with_buffers(HTTP_GET, "https://www.amazon.com/", HTTP_REQUEST_INTERFACE,"", "text/plain",2,32) 'STOPS GETTING CHUNKS EARLY DOORS
'	http_request(HTTP_GET, "https://anglesharp.azurewebsites.net/Chunked", HTTP_REQUEST_INTERFACE,"", "text/plain")


end sub

sub do_test()


	sys.debugprint("Test " + str(test_no) + " started\r\n")
	if tests(test_no).url<>"" then
		dim test as http_test = tests(test_no)
		http_request(test.method, test.url,HTTP_REQUEST_INTERFACE,test.data,test.content_type)
	else
		sys.debugprint("Tests ended\r\n")
	end if
		test_no=test_no+1
'	select case test_no
'	case 1:
'		http_request(HTTP_POST, "https://httpbin.org/post", HTTP_REQUEST_INTERFACE,"sensor_data","text/plain")
''		http_request(HTTP_GET, "https://www.amazon.com/", HTTP_REQUEST_INTERFACE,"", "text/plain")
'	case 2:
'		http_request(HTTP_GET, "https://104.40.239.93/lorem_ipsum.html", HTTP_REQUEST_INTERFACE,"","")
'	case 3:
'		http_request(HTTP_GET, "https://www.google.com/", HTTP_REQUEST_INTERFACE,"", "text/plain")
'	case 4:
'		http_request(HTTP_GET,"http://192.168.1.110:3000", HTTP_REQUEST_INTERFACE,"","text/plain")
'	case else:
'		sys.debugprint("Tests ended\r\n")
'	end select
	
	
end sub


sub callback_http_open_romfile()
	
	if tests(test_no).cert <> "" then
		romfile.open(tests(test_no).cert)
	end if
'	select case test_no
'	case 1:
'		romfile.open("amazon.cer")
''		romfile.open("httpbin.cer")
'	case 2:
'		romfile.open("sample.cer")
'	case 3:
'		romfile.open("google.cer")
'	case else:
		
'	end select
	
	
	
'	romfile.open("amazon.cer")

'	romfile.open("facebook.cer")
'	romfile.open("google.cer")
'	romfile.open("ms.cer")
	
end sub

sub on_sock_data_arrival()

	dhcp_proc_data()
	dns_proc_data()
	http_proc_data()
		
end sub

sub on_sock_event(newstate as enum pl_sock_state, newstatesimple as enum pl_sock_state_simple)
	
	http_sock_state_update(newstatesimple)
		
end sub


dim pointer as dword
dim romfile_opened as boolean=false

sub callback_http_send_post_data(remaining_content_length as dword)

	dim s as string = "data="+http_encode_url("data 1/.")
	dim b as byte = http_send_post_data(s)
	
end sub

sub callback_http_request_complete()
	
	sys.debugprint("Test Number " + str(test_no) + ": Passed\r\n")
	do_test()
end sub

sub callback_http_request_failed(error_message as string)

	sys.debugprint("Test Number " + str(test_no) + ": Failed\r\n")
	sys.debugprint("FAAIILL!\r\n")
end sub

sub on_sys_timer()

	wln_proc_timer()
	dhcp_proc_timer()
	dns_proc_timer()
	http_proc_timer()
	
end sub

sub on_wln_task_complete(completed_task as pl_wln_tasks)

	wln_proc_task_complete(completed_task)
	
end sub

sub on_wln_event(wln_event as pl_wln_events)

	wln_proc_event(wln_event)
	
end sub

sub callback_wln_ok()

	dhcp_start(HTTP_REQUEST_INTERFACE,"","")
		
end sub


sub callback_dhcp_ok(renew as no_yes, interface as pl_sock_interfaces, byref ip as string, byref gateway_ip as string, byref netmask as string, lease_time as dword)

#if NET_AVAILABLE
	if interface=PL_SOCK_INTERFACE_NET then
		if renew=YES and net.ip<>ip then
			sys.reboot
		end if
		if net.ip<>ip then
			net.ip=ip
			net.gatewayip=gateway_ip
			net.netmask=netmask
		end if
	end if
#endif
	
	if interface=PL_SOCK_INTERFACE_WLN then
		if renew=YES and wln.ip<>ip then
			sys.reboot
		end if
		if wln.ip<>ip then
			wln.ip=ip
			wln.gatewayip=gateway_ip
			wln.netmask=netmask
		end if
	end if		
	do_test()
	
end sub

sub on_sock_data_sent()

	http_on_sock_data_sent()

end sub

sub callback_http_post_data_sent_ok()
	
	sys.debugprint("\r\nData sent ok\r\n")
	
end sub

sub callback_dns_answer_acquired(return_type as en_dns_return_type, byref return_string as string)
	
	http_dns_answer_acquired(return_type, return_string)

end sub

sub callback_dns_ok()

	http_dns_ok()

end sub

sub callback_dhcp_failure(interface as pl_sock_interfaces,failure_code as en_dhcp_status_codes)	
end sub

sub callback_wln_failure(wln_state as en_wln_status_codes)
end sub

sub callback_dns_failure(status as en_dns_status_codes)
	http_dns_failure()
end sub

sub callback_dns_pre_buffrq(num_of_pages_required as byte)
end sub

sub callback_dns_buff_released()
end sub

sub callback_wln_starting_association()
end sub

sub callback_wln_pre_buffrq(required_buff_pages as byte)
end sub

sub callback_wln_rescan_result(current_rssi as byte, scan_rssi as byte, different_ap as no_yes)
end sub

sub callback_wln_rescan_for_better_ap()
end sub

sub callback_dhcp_pre_clear_ip(interface as pl_sock_interfaces)
end sub

sub callback_dhcp_pre_buffrq(required_buff_pages as byte)
end sub

sub callback_dhcp_buff_released()
end sub

sub callback_http_response_code_arrival(http_response as string)
end sub 

sub callback_http_header_arrival(header_type as string, header_value as string)
end sub

sub callback_http_headers_complete()
end sub

sub callback_http_content_arrival(data as string)
end sub
