include "global.tbh"

dim http_start_called as boolean=false
dim http_methods(6) as string(7) = {"GET", "HEAD", "POST", "PUT", "DELETE", "PATCH"}
dim http_request_list as http_request_type

sub http_start()

	dim b as byte
	for b=0 to HTTP_NUM_OF_REQS-1
		http_request_list.state(b)=FREE
	next b
	
end sub

sub http_stop()
	
	dim b as byte
	for b=0 to HTTP_NUM_OF_REQS-1
		http_request_list.state(b)=FREE
		http_release_socket(http_request_list.socket(b))
	next b	
	
end sub

sub http_proc_data()
	
	if http_check_socket_list()=255 then
		exit sub
	end if

	get_http_headers()
	get_http_content()

end sub

sub get_http_headers()

	if http_request_list.state(http_request_list.index)<>REQUEST_SENT then
		exit sub
	end if

	dim http_reply, next_byte as string

	while http_request_list.state(http_request_list.index)<>HTTP_HEADERS_PROCESSED
		next_byte=get_data(1)
		if next_byte="\x0a" then
			if http_request_list.state(http_request_list.index)=REQUEST_SENT then
				http_reply=left(http_reply,len(http_reply)-1)
				dim b1 as byte=instr(1,http_reply," ",1)
				dim b2 as byte=instr(1,http_reply," ",2)
				http_reply=mid(http_reply,b1+1,b2-b1-1)
				callback_http_response_code_arrival(http_reply)
				http_debugprint("HTTP Response Code Arrival> Reply: ", http_reply)
				http_request_list.state(http_request_list.index)=HTTP_RESPONSE_PROCESSED
				http_reply=""
			else if http_request_list.state(http_request_list.index)=HTTP_RESPONSE_PROCESSED then
				dim header_type, header_value as string
				dim b as byte= instr(1,http_reply,": ",1)
				if b=0 then
					callback_http_headers_complete()
					http_debugprint("HTTP Headers Complete", "")
					http_request_list.state(http_request_list.index)=HTTP_HEADERS_PROCESSED
					exit while
				end if
				header_type=left(http_reply,b-1)
				header_value=right(http_reply,len(http_reply)-b-1)
				header_value=left(header_value,len(header_value)-1)
				callback_http_header_arrival(header_type,header_value)
				http_debugprint("HTTP Header Arrival> Type: ",header_type + "\t\tValue: " + header_value)
				if header_type="Content-Length" then
					http_request_list.remaining_header_length(http_request_list.index)=val(header_value)
				end if
				http_reply=""
			end if
		else
			http_reply=http_reply+next_byte
		end if
	wend	
	
end sub

function get_http_content() as string
	
	if http_request_list.state(http_request_list.index)<>HTTP_HEADERS_PROCESSED then
		exit function
	end if
	
	dim data as string=get_data(255)
	http_request_list.remaining_header_length(http_request_list.index)=http_request_list.remaining_header_length(http_request_list.index)-len(data)
	callback_http_content_arrival(data)
	http_debugprint("HTTP Content Arrival> ", data)
	if http_request_list.remaining_header_length(http_request_list.index)=0 or http_request_list.method(http_request_list.index)=HTTP_HEAD then
		callback_http_request_complete()
		http_release_socket(http_request_list.socket(http_request_list.index))
	end if	

end function

sub http_release_socket(index as byte)

	sock_release(index)
	http_request_list.state(http_request_list.index)=FREE
	
end sub

sub http_dns_query(url as string)
	
	dim is_ip_address as boolean=true
	dim b as byte
	while is_ip_address=true 
		for b=1 to len(url)
			dim s as string=mid(url,b,1)
			dim ascii as word=asc(s)
			if ascii>=46 and ascii<=57 then
			else
				is_ip_address=false
				exit for
			end if
		next b
		
		if is_ip_address=true then
			http_request_list.ip(http_request_list.index)=url
			http_request_list.state(http_request_list.index)=DNS_REQUEST_SENT
			http_request_list.dns_request_in_progress=false
			http_request_list.state(http_request_list.index)=DNS_COMPLETE
			http_init_request_socket()
			exit sub
		end if
	wend
	
	http_request_list.dns_request_in_progress=true
	dns_connect(http_request_list.interface(http_request_list.index), "8.8.4.4", 0)
	dns_query(http_get_domain_name(url))
	http_request_list.state(http_request_list.index)=DNS_REQUEST_SENT
		
end sub

'Returns the domain name section of a given URL

function http_get_domain_name(url as string) as string
	
	dim b as byte
	if left(url, 4)="http" then
		b=instr(1,url,"/",2)
		url=right(url,len(url)-b)
	end if
	
	if left(url, 4)="www." then
		url=right(url,len(url)-4)
	end if
	

	b=instr(1,url,"/",1)
	http_get_domain_name=left(url,b-1)
	
	b=instr(1,url,":",1)
	if b>0 then
		dim port_segment as string=right(url,len(url)-b)
		http_get_domain_name=left(url,b-1)
		b=instr(1,port_segment,"/",1)
		if b>0 then
			port_segment=left(port_segment,b-1)
		end if
		http_request_list.port(http_request_list.index)=port_segment
	end if
	http_request_list.domain_name(http_request_list.index)=http_get_domain_name
		
end function

'Returns the path section of a given URL

function http_get_path(url as string) as string

	dim b as byte=instr(1,url,"/",3)
	http_get_path=right(url,len(url)-b+1)
		
end function

sub http_init_request_socket()

	if http_request_list.txbuffrq(http_request_list.index) = 0 then
		http_request_list.txbuffrq(http_request_list.index) = 2
	end if
	
	if http_request_list.rxbuffrq(http_request_list.index) = 0 then
		http_request_list.rxbuffrq(http_request_list.index) = 2
	end if 
	
	sock.num=http_request_list.socket(http_request_list.index)
	sock.targetip=http_request_list.ip(http_request_list.index)
	sock.protocol=PL_SOCK_PROTOCOL_TCP
	sock.inconmode= PL_SOCK_INCONMODE_ANY_IP_ANY_PORT
	sock.targetport=http_request_list.port(http_request_list.index)
	sock.targetinterface=http_request_list.interface(http_request_list.index)
	sock.txbuffrq(http_request_list.txbuffrq(http_request_list.index))
	sock.rxbuffrq(http_request_list.rxbuffrq(http_request_list.index))
	sys.buffalloc()
	 
	#if SSL 
	if http_request_list.ssl(http_request_list.index)=true then
		sock.tlsdeinit()
		sock.tlsbuffrq(70)
		sys.buffalloc
		sock.tlsinit()  'check return state
		sock.rxclear()
		sock.txclear()
	end if
	#endif
	
	sock.connect()

end sub

sub http_get_ip(url as string)

	if left(url, 5)="https" then
		http_request_list.ssl(http_request_list.index)=true
		http_request_list.port(http_request_list.index)=443
	else
		http_request_list.ssl(http_request_list.index)=false
		http_request_list.port(http_request_list.index)=80
	end if

	http_dns_query(http_request_list.domain_name(http_request_list.index))
	

end sub

sub http_generate_request(byref url as string, method as HTTP_REQUEST_METHODS, byref data as string, byref content_type as string, request_length as dword, long_request as boolean)

	if content_type="" then
		content_type="text/plain"
	end if
	
	http_request_list.socket(http_request_list.index)=sock_get("HTTP"+str(http_request_list.index))
	http_request_list.url(http_request_list.index)=url
	http_request_list.method(http_request_list.index)=method
	http_request_list.remaining_content_length(http_request_list.index)=request_length
	
	if long_request=true then
		if method=HTTP_GET or method=HTTP_HEAD then
			http_request_list.request(http_request_list.index)=http_methods(method) + " " + http_get_path(url) + "?" + data + " HTTP/1.1\x0d\x0aHost: " + http_get_domain_name(url) + "\x0d\x0aContent-Type: " + content_type + "\x0d\x0a\x0d\x0a" 
		else	
			http_request_list.request(http_request_list.index)=http_methods(method) + " " + http_get_path(url) + " HTTP/1.1\x0d\x0aHost: " + http_get_domain_name(url) + "\x0d\x0aContent-Type: " + content_type + "\x0d\x0aContent-Length: " + str(request_length) + "\x0d\x0a\x0d\x0a"
		end if
	else
		if method=HTTP_GET or method=HTTP_HEAD then
			http_request_list.request(http_request_list.index)=http_methods(method) + " " + http_get_path(url) + "?" + data + " HTTP/1.1\x0d\x0aHost: " + http_get_domain_name(url) + "\x0d\x0aContent-Type: " + content_type + "\x0d\x0a\x0d\x0a" + data
		else	
			http_request_list.request(http_request_list.index)=http_methods(method) + " " + http_get_path(url) + " HTTP/1.1\x0d\x0aHost: " + http_get_domain_name(url) + "\x0d\x0aContent-Type: " + content_type + "\x0d\x0aContent-Length: " + str(len(data)) + "\x0d\x0a\x0d\x0a" + data
		end if
	end if
		
end sub

function http_request(method as HTTP_REQUEST_METHODS, byref url as string, interface as pl_sock_interfaces, byref data as string, content_type as string) as byte
	
	http_request=http_request_with_buffers(method,url,interface,data,content_type,2,2)
	
end function



function http_request_with_buffers(method as HTTP_REQUEST_METHODS, byref url as string, interface as pl_sock_interfaces, byref data as string, content_type as string, txbuffrq as byte, rxbuffrq as byte) as byte
'Sends an HTTP request of a maximum length of 255 bytes

	if http_start_called=false then
		http_start()
		http_start_called=true
	end if
	if http_assign_free_index()=NG then
		http_request_with_buffers=255
		exit function
	end if
	http_generate_request(url, method, data, content_type, 0, false)
	http_request_with_buffers=http_request_list.socket(http_request_list.index)
	http_request_list.interface(http_request_list.index)=interface
	http_request_list.txbuffrq(http_request_list.index)=txbuffrq
	http_request_list.rxbuffrq(http_request_list.index)=rxbuffrq
	
	if http_request_list.dns_request_in_progress=false then
		http_get_ip(url)
	end if
	
end function

'Sends a HTTP request to the specified path on a specified domain name. 

function http_request_long(method as HTTP_REQUEST_METHODS, byref url as string, interface as pl_sock_interfaces, request_length as dword, content_type as string) as byte
	
	http_request_long=http_request_long_with_buffers(method,url,interface,request_length,content_type,2,2)
	
end function

'Sends a HTTP request to the specified path on a specified domain name. 

function http_request_long_with_buffers(method as HTTP_REQUEST_METHODS, byref url as string, interface as pl_sock_interfaces, request_length as dword, content_type as string, txbuffrq as byte, rxbuffrq as byte) as byte
	
	if http_start_called=false then
		http_start()
		http_start_called=true
	end if
	if http_assign_free_index()=NG then
		http_request_long_with_buffers=255
		exit function
	end if
	http_generate_request(url,method, "", content_type, request_length, true)
	http_request_long_with_buffers=http_request_list.socket(http_request_list.index)
	http_request_list.interface(http_request_list.index)=interface
	http_request_list.txbuffrq(http_request_list.index)=txbuffrq
	http_request_list.rxbuffrq(http_request_list.index)=rxbuffrq
	
	if http_request_list.dns_request_in_progress=false then
		http_get_ip(url)
	end if
	
	
end function

function http_assign_free_index() as ok_ng

	dim b as byte
	for b=0 to HTTP_NUM_OF_REQS-1
		if http_request_list.state(b)=FREE then
			 http_request_list.index=b
			 http_request_list.state(b)=DNS_NOT_COMPLETE
			 http_assign_free_index=OK
			 exit function
		end if		
	next b	
	http_assign_free_index=NG


end function

sub http_dns_answer_acquired(return_type as en_dns_return_type, byref return_string as string)
	
	if(return_type=EN_DNS_RET_IP) then
		http_check_list_for_dns_sent()
		http_request_list.ip(http_request_list.index)=ddstr(return_string)
	end if
	
end sub

function http_check_list_for_dns_sent() as byte
	
	http_check_list_for_dns_sent=255
	dim b as byte
	for b=0 to HTTP_NUM_OF_REQS-1
		if http_request_list.state(b)=DNS_REQUEST_SENT then
			http_check_list_for_dns_sent=b
			http_request_list.index=b
			exit for
		end if
	next b
	
end function

sub http_dns_ok()
	
	http_check_list_for_dns_sent()
	http_request_list.dns_request_in_progress=false
	http_request_list.state(http_request_list.index)=DNS_COMPLETE
	http_init_request_socket()
	http_check_dns_queue()

end sub

sub http_check_dns_queue()

	dim b as byte
	for b=0 to HTTP_NUM_OF_REQS-1
		if http_request_list.state(b)=DNS_NOT_COMPLETE then
			http_request_list.index=b
			http_get_ip(http_request_list.url(b))
			exit sub
		end if		
	next b	
	
end sub

 sub http_debugprint(byref print_type as string, byref print_data as string) 
	
	#if HTTP_DEBUG_PRINT 
		sys.debugprint(HTTP_STAMP)
		sys.debugprint(print_type)
		sys.debugprint(print_data)
		sys.debugprint(HTTP_CR_LF)
	#endif

end sub


function http_send_post_data(data as string) as byte
	
	if http_check_socket_list()=255 then
		exit function
	end if
	
	if sock.txfree>255 then
		http_send_post_data=255
	else
		http_send_post_data=sock.txfree
	end if
		
	if http_request_list.remaining_content_length(http_request_list.index)<=http_send_post_data then
		http_send_post_data=http_request_list.remaining_content_length(http_request_list.index)
	end if
	
	http_request_list.remaining_content_length(http_request_list.index)=http_request_list.remaining_content_length(http_request_list.index)-http_send_post_data
	data=left(data,http_send_post_data)
	set_data(data)
	sock.notifysent(0)
	sock.send()		
	
end function

sub set_data(data as string)
	if http_request_list.ssl(http_request_list.index)=true then
		#if SSL
			sock.tlssetdata(data)
		#endif
	else
		sock.setdata(data)
	end if
end sub

function get_data(size as byte) as string
	if http_request_list.ssl(http_request_list.index)=true then
		#if SSL
			get_data=sock.tlsgetdata(size)
		#endif
	else
		get_data=sock.getdata(size)
	end if
end function


function http_encode_url(unencoded_url as string) as string
 
	dim i, j, n as byte
	dim chr_hex as string
	for i = 1 to len(unencoded_url)
		n = asc(mid(unencoded_url,i,1))
		if n > 127 then
			sys.debugprint("Character out of range")
		else if (n >= 48 and n <= 57) or (n >= 65 and n <= 90) or (n >= 97 and n <= 122) then
			http_encode_url = http_encode_url + mid(unencoded_url,i,1)
		else
			chr_hex = hex(asc(mid(unencoded_url,i,1)))
			chr_hex=right(chr_hex,len(chr_hex)-2)
			for j = 0 to (len(chr_hex)/2)-1
			    http_encode_url = http_encode_url + "%" + mid(chr_hex ,(2*j) + 1,2)
			next j
		end if
	next
	
end function

function http_check_socket_list() as byte
	
	http_check_socket_list=255
	dim b as byte
	for b=0 to HTTP_NUM_OF_REQS-1
		if http_request_list.socket(b)=sock.num and sock.num<>0 then
			http_check_socket_list=b
			http_request_list.index=b
			exit for
		end if
	next b
	
end function

sub http_sock_state_update(newstatesimple as enum pl_sock_state_simple)

	if http_check_socket_list()=255 then
		exit sub
	end if

	if http_request_list.state(http_request_list.index)=DNS_NOT_COMPLETE then
		exit sub
	end if
	
	if newstatesimple<>PL_SSTS_EST then
		exit sub
	else
		if http_request_list.ssl(http_request_list.index)=true then
			#if SSL
				sock.tlshandshake()   
			#endif
		else	
			set_data(http_request_list.request(http_request_list.index))
			sock.send()
			if http_request_list.remaining_content_length(http_request_list.index)>0 then
				callback_http_send_post_data(http_request_list.remaining_content_length(http_request_list.index))
			end if
		end if
	end if
	
	#if SSL
		if sock.state=PL_TLS_EST then
			set_data(http_request_list.request(http_request_list.index))
			sock.send()
			if http_request_list.method(http_request_list.index)=HTTP_POST and http_request_list.remaining_content_length(http_request_list.index)>0 then
				callback_http_send_post_data(http_request_list.remaining_content_length(http_request_list.index))
			end if
		end	if
	#endif
	
	http_request_list.state(http_request_list.index)=REQUEST_SENT	
	
end sub

sub http_on_sock_data_sent()

	if http_check_socket_list()=255 then
		exit sub
	end if
	
	if http_request_list.remaining_content_length(http_request_list.index)>0 then
		callback_http_send_post_data(http_request_list.remaining_content_length(http_request_list.index))
	else
		callback_http_post_data_sent_ok()
		http_debugprint("HTTP Post Data Sent","")
	end if
	
end sub